
SEL-F446RE-002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080006cc  080006cc  000016cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006ec  080006ec  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080006ec  080006ec  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006ec  080006ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006ec  080006ec  000016ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006f0  080006f0  000016f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006f4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006f8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006f8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014f5  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005cf  00000000  00000000  00003529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00003af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000177  00000000  00000000  00003d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6a3  00000000  00000000  00003e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029f8  00000000  00000000  0002352a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1626  00000000  00000000  00025f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000654  00000000  00000000  000e758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000e7be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080006b4 	.word	0x080006b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080006b4 	.word	0x080006b4

08000204 <LCD_init>:
#include "stm32f4xx.h"




extern void LCD_init(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	init_ports();
 8000208:	f000 f828 	bl	800025c <init_ports>

	delayLCD(35);
 800020c:	2023      	movs	r0, #35	@ 0x23
 800020e:	f000 f937 	bl	8000480 <delayLCD>
	LCD_cmd_strt(FUNC_SET_EIGHT);		//first time cannot read status
 8000212:	2030      	movs	r0, #48	@ 0x30
 8000214:	f000 f8dc 	bl	80003d0 <LCD_cmd_strt>
	delayLCD(15);
 8000218:	200f      	movs	r0, #15
 800021a:	f000 f931 	bl	8000480 <delayLCD>
	LCD_cmd_strt(FUNC_SET_EIGHT);
 800021e:	2030      	movs	r0, #48	@ 0x30
 8000220:	f000 f8d6 	bl	80003d0 <LCD_cmd_strt>
	delayLCD(1);
 8000224:	2001      	movs	r0, #1
 8000226:	f000 f92b 	bl	8000480 <delayLCD>
	LCD_cmd_strt(FUNC_SET_EIGHT);		// busy flag ready
 800022a:	2030      	movs	r0, #48	@ 0x30
 800022c:	f000 f8d0 	bl	80003d0 <LCD_cmd_strt>

	LCD_cmd(EIGHT_BIT);
 8000230:	2038      	movs	r0, #56	@ 0x38
 8000232:	f000 f8a3 	bl	800037c <LCD_cmd>
	LCD_cmd(SHIFT_CRS_RGHT);
 8000236:	2006      	movs	r0, #6
 8000238:	f000 f8a0 	bl	800037c <LCD_cmd>
	LCD_cmd(CLEAR_SCREEN);
 800023c:	2001      	movs	r0, #1
 800023e:	f000 f89d 	bl	800037c <LCD_cmd>
	LCD_cmd(DISPLAY_ON_BLINK);
 8000242:	200f      	movs	r0, #15
 8000244:	f000 f89a 	bl	800037c <LCD_cmd>
	GPIOA->ODR |= LED_PIN_SEL;			// LED2 ON, LCD ready to receive information
 8000248:	4b03      	ldr	r3, [pc, #12]	@ (8000258 <LCD_init+0x54>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a02      	ldr	r2, [pc, #8]	@ (8000258 <LCD_init+0x54>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]

}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40020000 	.word	0x40020000

0800025c <init_ports>:


extern void init_ports(void){
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (RCC_GPIOA_SEL | RCC_GPIOB_SEL | RCC_GPIOC_SEL);
 8000260:	4b1a      	ldr	r3, [pc, #104]	@ (80002cc <init_ports+0x70>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000264:	4a19      	ldr	r2, [pc, #100]	@ (80002cc <init_ports+0x70>)
 8000266:	f043 0307 	orr.w	r3, r3, #7
 800026a:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER &= CLEAR_LED_MODE;
 800026c:	4b18      	ldr	r3, [pc, #96]	@ (80002d0 <init_ports+0x74>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a17      	ldr	r2, [pc, #92]	@ (80002d0 <init_ports+0x74>)
 8000272:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000276:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= SET_LED_OUTPUT_MODE;
 8000278:	4b15      	ldr	r3, [pc, #84]	@ (80002d0 <init_ports+0x74>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a14      	ldr	r2, [pc, #80]	@ (80002d0 <init_ports+0x74>)
 800027e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000282:	6013      	str	r3, [r2, #0]

    // PB5 is R/S
	// PB6 is R/W
	// PB7 is EN
	GPIOB->MODER &= CLEAR_CTRL_MODE;
 8000284:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <init_ports+0x78>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a12      	ldr	r2, [pc, #72]	@ (80002d4 <init_ports+0x78>)
 800028a:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800028e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= SET_CTRL_OUTPUT;
 8000290:	4b10      	ldr	r3, [pc, #64]	@ (80002d4 <init_ports+0x78>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0f      	ldr	r2, [pc, #60]	@ (80002d4 <init_ports+0x78>)
 8000296:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = ((EN | RW) << 16);				// turn off EN and RW
 800029c:	4b0d      	ldr	r3, [pc, #52]	@ (80002d4 <init_ports+0x78>)
 800029e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80002a2:	619a      	str	r2, [r3, #24]

	/* Data D0-D7 ==> PC0-PC7 */
	GPIOC->MODER &= CLEAR_DATA_MODE;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <init_ports+0x7c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	@ (80002d8 <init_ports+0x7c>)
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	041b      	lsls	r3, r3, #16
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= SET_DATA_OUTPUT_MODE;
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <init_ports+0x7c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	@ (80002d8 <init_ports+0x7c>)
 80002b6:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80002ba:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80002be:	6013      	str	r3, [r2, #0]


}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40020800 	.word	0x40020800

080002dc <LCD_isready>:
 * data can be written again to the display controller.
 * Change PC7 to input. to read display. Change PC7 again to output
 * to write characters.
 * A mistake in input/output could destroy pin or microcontroller.
 */
extern void LCD_isready(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0

	volatile char flag = BUSY_FLAG;			//initialised to "busy" by default
 80002e2:	2380      	movs	r3, #128	@ 0x80
 80002e4:	71fb      	strb	r3, [r7, #7]

	GPIOA->ODR &= ~LED_PIN_SEL;	// turn LED OFF
 80002e6:	4b22      	ldr	r3, [pc, #136]	@ (8000370 <LCD_isready+0x94>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a21      	ldr	r2, [pc, #132]	@ (8000370 <LCD_isready+0x94>)
 80002ec:	f023 0320 	bic.w	r3, r3, #32
 80002f0:	6153      	str	r3, [r2, #20]

	/* change to poll status register**/
	GPIOC->MODER &= CLEAR_DATA_MODE;			// clear PC0-PC7 mode (input is reset state)
 80002f2:	4b20      	ldr	r3, [pc, #128]	@ (8000374 <LCD_isready+0x98>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000374 <LCD_isready+0x98>)
 80002f8:	0c1b      	lsrs	r3, r3, #16
 80002fa:	041b      	lsls	r3, r3, #16
 80002fc:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = (RS << 16);					// set RS to 0
 80002fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <LCD_isready+0x9c>)
 8000300:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000304:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = RW;							// set R/W to 1 (read)
 8000306:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <LCD_isready+0x9c>)
 8000308:	2240      	movs	r2, #64	@ 0x40
 800030a:	619a      	str	r2, [r3, #24]
	delayLCD(0);
 800030c:	2000      	movs	r0, #0
 800030e:	f000 f8b7 	bl	8000480 <delayLCD>


	do{
		// stay in loop until flag changed to 0
		GPIOB->BSRR = EN;		//EN high
 8000312:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <LCD_isready+0x9c>)
 8000314:	2280      	movs	r2, #128	@ 0x80
 8000316:	619a      	str	r2, [r3, #24]
		delayLCD(0);
 8000318:	2000      	movs	r0, #0
 800031a:	f000 f8b1 	bl	8000480 <delayLCD>
		flag = GPIOC->IDR;		// status register
 800031e:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <LCD_isready+0x98>)
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	71fb      	strb	r3, [r7, #7]
		delayLCD(0);
 8000326:	2000      	movs	r0, #0
 8000328:	f000 f8aa 	bl	8000480 <delayLCD>
		GPIOB->BSRR = (EN << 16);	//EN Low
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <LCD_isready+0x9c>)
 800032e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000332:	619a      	str	r2, [r3, #24]
		delayLCD(2);
 8000334:	2002      	movs	r0, #2
 8000336:	f000 f8a3 	bl	8000480 <delayLCD>

	} while (flag & BUSY_FLAG);		// continue until bit flag = 0 in PC7
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	b2db      	uxtb	r3, r3
 800033e:	b25b      	sxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	dbe6      	blt.n	8000312 <LCD_isready+0x36>

	/* IMPORTANT: return to write config */
	GPIOB->BSRR = (RW << 16);			// R/W = o is write to display
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <LCD_isready+0x9c>)
 8000346:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800034a:	619a      	str	r2, [r3, #24]
	GPIOC->MODER |= SET_DATA_OUTPUT_MODE;
 800034c:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <LCD_isready+0x98>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a08      	ldr	r2, [pc, #32]	@ (8000374 <LCD_isready+0x98>)
 8000352:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000356:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800035a:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= LED_PIN_SEL;			// LED2 ON, LCD ready to receive information
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <LCD_isready+0x94>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a03      	ldr	r2, [pc, #12]	@ (8000370 <LCD_isready+0x94>)
 8000362:	f043 0320 	orr.w	r3, r3, #32
 8000366:	6153      	str	r3, [r2, #20]
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40020000 	.word	0x40020000
 8000374:	40020800 	.word	0x40020800
 8000378:	40020400 	.word	0x40020400

0800037c <LCD_cmd>:

extern void LCD_cmd(unsigned char cmd){
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	LCD_isready();			// stuck in loop until ready
 8000386:	f7ff ffa9 	bl	80002dc <LCD_isready>
	GPIOB->BSRR = ((RS | RW) << 16);			// RS=0 (settings mode), RW=0 (write)
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <LCD_cmd+0x4c>)
 800038c:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000390:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = EN;							// EN high
 8000392:	4b0d      	ldr	r3, [pc, #52]	@ (80003c8 <LCD_cmd+0x4c>)
 8000394:	2280      	movs	r2, #128	@ 0x80
 8000396:	619a      	str	r2, [r3, #24]
	delayLCD(0);								// give it some time
 8000398:	2000      	movs	r0, #0
 800039a:	f000 f871 	bl	8000480 <delayLCD>
	GPIOC->ODR = cmd;							// write instruction for LCD
 800039e:	4a0b      	ldr	r2, [pc, #44]	@ (80003cc <LCD_cmd+0x50>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	6153      	str	r3, [r2, #20]
	delayLCD(0);								// ensure data is in D0-D7
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 f86b 	bl	8000480 <delayLCD>
	GPIOB->BSRR = (EN << 16);					// EN to BRR
 80003aa:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <LCD_cmd+0x4c>)
 80003ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80003b0:	619a      	str	r2, [r3, #24]
	delayLCD(0);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 f864 	bl	8000480 <delayLCD>
	GPIOC->ODR |= 0x0;							//clear instruction
 80003b8:	4b04      	ldr	r3, [pc, #16]	@ (80003cc <LCD_cmd+0x50>)
 80003ba:	4a04      	ldr	r2, [pc, #16]	@ (80003cc <LCD_cmd+0x50>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	6153      	str	r3, [r2, #20]

}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40020400 	.word	0x40020400
 80003cc:	40020800 	.word	0x40020800

080003d0 <LCD_cmd_strt>:


extern void LCD_cmd_strt(unsigned char cmd){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	//LCD_isready();							// DO NOT USE LCD_isready first time
	GPIOB->BSRR = ((RS | RW) << 16);			// RS=0 (settings mode), RW=0 (write)
 80003da:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <LCD_cmd_strt+0x48>)
 80003dc:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80003e0:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = EN;							// EN high
 80003e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <LCD_cmd_strt+0x48>)
 80003e4:	2280      	movs	r2, #128	@ 0x80
 80003e6:	619a      	str	r2, [r3, #24]
	delayLCD(0);								// give it some time
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f849 	bl	8000480 <delayLCD>
	GPIOC->ODR = cmd;							// write instruction for LCD
 80003ee:	4a0b      	ldr	r2, [pc, #44]	@ (800041c <LCD_cmd_strt+0x4c>)
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	6153      	str	r3, [r2, #20]
	delayLCD(0);								// ensure data is in D0-D7
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f843 	bl	8000480 <delayLCD>
	GPIOB->BSRR = (EN << 16);					// EN to BRR
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <LCD_cmd_strt+0x48>)
 80003fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000400:	619a      	str	r2, [r3, #24]
	delayLCD(0);
 8000402:	2000      	movs	r0, #0
 8000404:	f000 f83c 	bl	8000480 <delayLCD>
	GPIOC->ODR |= 0x0;							//clear instruction
 8000408:	4b04      	ldr	r3, [pc, #16]	@ (800041c <LCD_cmd_strt+0x4c>)
 800040a:	4a04      	ldr	r2, [pc, #16]	@ (800041c <LCD_cmd_strt+0x4c>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	6153      	str	r3, [r2, #20]


}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40020400 	.word	0x40020400
 800041c:	40020800 	.word	0x40020800

08000420 <LCD_acsii>:


extern void LCD_acsii(char data){
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]

	LCD_isready();
 800042a:	f7ff ff57 	bl	80002dc <LCD_isready>
	GPIOB->BSRR = RS;							// RS=1 (data mode)
 800042e:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <LCD_acsii+0x58>)
 8000430:	2220      	movs	r2, #32
 8000432:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (RW << 16);					// RW=0 (write mode)
 8000434:	4b10      	ldr	r3, [pc, #64]	@ (8000478 <LCD_acsii+0x58>)
 8000436:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800043a:	619a      	str	r2, [r3, #24]
	delayLCD(0);
 800043c:	2000      	movs	r0, #0
 800043e:	f000 f81f 	bl	8000480 <delayLCD>
	GPIOB->BSRR = EN;							// EN high
 8000442:	4b0d      	ldr	r3, [pc, #52]	@ (8000478 <LCD_acsii+0x58>)
 8000444:	2280      	movs	r2, #128	@ 0x80
 8000446:	619a      	str	r2, [r3, #24]
	delayLCD(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f000 f819 	bl	8000480 <delayLCD>
	GPIOC->ODR = data;							// write "data" to ODR of port C
 800044e:	4a0b      	ldr	r2, [pc, #44]	@ (800047c <LCD_acsii+0x5c>)
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	6153      	str	r3, [r2, #20]
	delayLCD(0);
 8000454:	2000      	movs	r0, #0
 8000456:	f000 f813 	bl	8000480 <delayLCD>
	GPIOB->BSRR = (EN << 16);					//EN low, finished sending data to LCD
 800045a:	4b07      	ldr	r3, [pc, #28]	@ (8000478 <LCD_acsii+0x58>)
 800045c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000460:	619a      	str	r2, [r3, #24]
	delayLCD(1);
 8000462:	2001      	movs	r0, #1
 8000464:	f000 f80c 	bl	8000480 <delayLCD>
	GPIOC->ODR |= 0x0;							//clear data
 8000468:	4b04      	ldr	r3, [pc, #16]	@ (800047c <LCD_acsii+0x5c>)
 800046a:	4a04      	ldr	r2, [pc, #16]	@ (800047c <LCD_acsii+0x5c>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	6153      	str	r3, [r2, #20]

}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40020400 	.word	0x40020400
 800047c:	40020800 	.word	0x40020800

08000480 <delayLCD>:

/* APPROX> milliseconds delay for a 16MHz System Clock. Check with Oscilloscope
 * if accuracy is paramount.
 */
extern void delayLCD(unsigned int ms){
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

	int i = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
	for(; ms > 0; ms--){
 800048c:	e00c      	b.n	80004a8 <delayLCD+0x28>
		for(i = 0; i < 3200; i++);
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e002      	b.n	800049a <delayLCD+0x1a>
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80004a0:	dbf8      	blt.n	8000494 <delayLCD+0x14>
	for(; ms > 0; ms--){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	3b01      	subs	r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1ef      	bne.n	800048e <delayLCD+0xe>
	}
}
 80004ae:	bf00      	nop
 80004b0:	bf00      	nop
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <refreshLCD>:


extern void refreshLCD(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	GPIOC->MODER &= BUTTON_INPUT_MODE;		// PC13 button as input
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <refreshLCD+0x38>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a0b      	ldr	r2, [pc, #44]	@ (80004f4 <refreshLCD+0x38>)
 80004c6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80004ca:	6013      	str	r3, [r2, #0]
	while((GPIOC->IDR & BUTTON_IS_HIGH)){
 80004cc:	e002      	b.n	80004d4 <refreshLCD+0x18>
		delayLCD(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f7ff ffd6 	bl	8000480 <delayLCD>
	while((GPIOC->IDR & BUTTON_IS_HIGH)){
 80004d4:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <refreshLCD+0x38>)
 80004d6:	691b      	ldr	r3, [r3, #16]
 80004d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1f6      	bne.n	80004ce <refreshLCD+0x12>
	}
	LCD_cmd(CLEAR_SCREEN);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f7ff ff4b 	bl	800037c <LCD_cmd>
	delayLCD(500);
 80004e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004ea:	f7ff ffc9 	bl	8000480 <delayLCD>

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40020800 	.word	0x40020800

080004f8 <main>:
#include "LCDbyte.h"




int main(void){
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b08b      	sub	sp, #44	@ 0x2c
 80004fc:	af00      	add	r7, sp, #0

	LCD_init();
 80004fe:	f7ff fe81 	bl	8000204 <LCD_init>

	    while(1){

	    	const char message[32] = "SyntaxErrorLab\0";
 8000502:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <main+0x70>)
 8000504:	1d3c      	adds	r4, r7, #4
 8000506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
	    	LCD_acsii(0b01100001); //a
	    	LCD_acsii(0b01100010); //b
	    	*/


	    	short c = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    	while (message[c] != '\0'){
 800051e:	e014      	b.n	800054a <main+0x52>
	    		LCD_acsii(message[c]);
 8000520:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000524:	3328      	adds	r3, #40	@ 0x28
 8000526:	443b      	add	r3, r7
 8000528:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff77 	bl	8000420 <LCD_acsii>
	    		c++;
 8000532:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000536:	b29b      	uxth	r3, r3
 8000538:	3301      	adds	r3, #1
 800053a:	b29b      	uxth	r3, r3
 800053c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    		if(c > 32) { return 1;}
 800053e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000542:	2b20      	cmp	r3, #32
 8000544:	dd01      	ble.n	800054a <main+0x52>
 8000546:	2301      	movs	r3, #1
 8000548:	e00a      	b.n	8000560 <main+0x68>
	    	while (message[c] != '\0'){
 800054a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800054e:	3328      	adds	r3, #40	@ 0x28
 8000550:	443b      	add	r3, r7
 8000552:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d1e2      	bne.n	8000520 <main+0x28>
	    	}


	    	/* clear LCD */
	    	refreshLCD();
 800055a:	f7ff ffaf 	bl	80004bc <refreshLCD>
	    while(1){
 800055e:	e7d0      	b.n	8000502 <main+0xa>
	    }

}
 8000560:	4618      	mov	r0, r3
 8000562:	372c      	adds	r7, #44	@ 0x2c
 8000564:	46bd      	mov	sp, r7
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	080006cc 	.word	0x080006cc

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <NMI_Handler+0x4>

08000574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <MemManage_Handler+0x4>

08000584 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <UsageFault_Handler+0x4>

08000594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c2:	f000 f83f 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <SystemInit+0x20>)
 80005d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d6:	4a05      	ldr	r2, [pc, #20]	@ (80005ec <SystemInit+0x20>)
 80005d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000628 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005f4:	f7ff ffea 	bl	80005cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	@ (800062c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	@ (8000630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	@ (800063c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800061e:	f000 f825 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000622:	f7ff ff69 	bl	80004f8 <main>
  bx  lr    
 8000626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000634:	080006f4 	.word	0x080006f4
  ldr r2, =_sbss
 8000638:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800063c:	20000024 	.word	0x20000024

08000640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC_IRQHandler>
	...

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000
 8000668:	20000020 	.word	0x20000020

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	@ (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	@ (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	@ (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	@ (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 f818 	bl	80006b4 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	080006ec 	.word	0x080006ec
 80006a8:	080006ec 	.word	0x080006ec
 80006ac:	080006ec 	.word	0x080006ec
 80006b0:	080006f0 	.word	0x080006f0

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
